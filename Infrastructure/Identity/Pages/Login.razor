@page "/identity/login"
@using PlannerApp.Data.ViewModels;
@using PlannerApp.Infrastructure.Identity.Models;
@inject PlannerApp.Infrastructure.Identity.Service.IAccountService AccountService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<div class="container">
    <div class="container">
        <div class="row justify-content-around">
            <div>
                <h4 class="text-center">Signin</h4>
            </div>
        </div>
    </div>

    <form class="">
        <div class="form-group">
            <label for="username">UserName</label>
            <input type="text" class="form-control" id="username" aria-describedby="usernameHelp" placeholder="Enter Username" @bind="loginViewModel.UserName">
        </div>

        <div class="form-group">
            <label for="password">Password</label>
            <input type="password" class="form-control" id="password" placeholder="Password" @bind="loginViewModel.Password">
        </div>

        <div class="form-group row justify-content-between">

            @if (formInProgress)
            {
                <div class="form-group justify-content-center">
                    <button type="button" class="btn btn-primary" disabled>
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        Signing in
                    </button>
                </div>
            }
            else
            {
                <div class="form-group justify-content-center">
                    <button type="button" class="btn btn-primary" @onclick="() => LoginUser()">
                        Sign In
                    </button>
                </div>
            }

            <div class="form-check">
                <input type="checkbox" class="form-check-input" id="rememberMe" @bind="loginViewModel.RememberMe">
                <label class="form-check-label" for="rememberMe">Remember Me</label>
            </div>

        </div>

    </form>
</div>

@code {
    LoginViewModel loginViewModel = new LoginViewModel();
    bool formInProgress = false;

    protected async Task LoginUser()
    {
        UdateFormState(true);

        AppUser appUser = await AccountService.Login(loginViewModel);

        this.StateHasChanged();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            // Since the user is a ClaimsPrincipal, you can also enumerate claims,
            // evaluate membership in roles, etc.
            Console.WriteLine($"Hello, {user.Identity.Name}!");
            NavigationManager.NavigateTo("/", forceLoad: false);

        }
        else
        {
            Console.WriteLine("You're not logged in.");
        }

        if (appUser != null)
        {
            //NavigationManager.NavigateTo("/counter");
        }
        UdateFormState(false);
    }

    private void UdateFormState(bool isDisabled)
    {
        formInProgress = isDisabled;
        this.StateHasChanged();
    }

}